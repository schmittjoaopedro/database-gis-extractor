# > install.packages("ggmap")
# Retrieving lines from Postgree
setwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom) from linhas")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 10)
route_index = 400
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
route
route$name
route$name[1]
route_index
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
write.csv(x = route, file = paste("bus_lines", ds_linhas$name[route_index], sep = "/"), row.names = FALSE)
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
write.csv(x = route, file = paste("bus_lines/", ds_linhas$name[route_index], ".csv", sep = ""), row.names = FALSE)
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving lines from Postgree
setwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom) from linhas")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot a route
source("convert_line_string_to_data_frame.R")
options(digits = 10)
for(route_index in 1:dim(ds_linhas)[1]) {
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
write.csv(x = route, file = paste("bus_lines/", ds_linhas$name[route_index], ".csv", sep = ""), row.names = FALSE)
}
ds_linhas$name
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving lines from Postgree
setwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom) from linhas")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot a route
source("convert_line_string_to_data_frame.R")
options(digits = 10)
for(route_index in 1:dim(ds_linhas)[1]) {
route_id <- ds_linhas$id[route_index]
route_name <- ds_linhas$name[route_index]
route <- convertLineStringToDataFrame(route_id, route_name, ds_linhas$st_astext[route_index])
write.csv(x = route, file = paste("bus_lines/", route_id, " - ", route_name, ".csv", sep = ""), row.names = FALSE)
}
test <- "149 - 1737 â€“ Plasbohn / Sul Volta.csv"
test
gsub("/", "\\s", test)
gsub("/", "\s", test)
gsub("/", "", test)
gsub("/", "to", test)
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving lines from Postgree
setwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom) from linhas")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot a route
source("convert_line_string_to_data_frame.R")
options(digits = 10)
for(route_index in 1:dim(ds_linhas)[1]) {
route_id <- ds_linhas$id[route_index]
route_name <- gsub("/", "to", ds_linhas$name[route_index])
route <- convertLineStringToDataFrame(route_id, route_name, ds_linhas$st_astext[route_index])
write.csv(x = route, file = paste("bus_lines/", route_id, " - ", route_name, ".csv", sep = ""), row.names = FALSE)
}
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgree
setwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom) from linhas")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot geom in a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 10)
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 13, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
map_jille_graph
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgreesetwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, source, target, ST_AsText(geom) from linhas_linhas_noded")
}
dbDisconnect(con)
dbUnloadDriver(drv)
dim(ds_linhas)
names(ds_linhas)
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 10)
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index])
route
options(digits = 15)
route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 15)
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index])
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 13, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgreesetwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, source, target, ST_AsText(geom) from linhas_linhas_noded")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot geom line in a route
# Plot geom in a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 15)
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index])
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 16, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 20, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
route
ds_linhas[ds_linhas$id == 536]
ds_linhas[ds_linhas$id == "536"]
head(ds_linhas)
dim(ds_linhas)
names(ds_linhas)
ds_linhas[ds_linhas$id == "536",]
route <- merge(route, ds_linhas, by = "id")
route
ds_linhas[ds_linhas$id == "536",]
ds_linhas[ds_linhas$id == "536",c("id","source","target")]
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index])
route <- merge(route, ds_linhas[,c("id","source","target")], by = "id")
route
route_before <- convertLineStringToDataFrame(ds_linhas$id[id == route$source,], ds_linhas$id[id == route$source,], ds_linhas$st_astext[id == route$source,])
route_before <- ds_linhas[ds_linhas$id == route$source,]
route_before <- convertLineStringToDataFrame(route_before$id, route_before$id, route_before$st_astext)
route_before
route_before <- ds_linhas[ds_linhas$id == route$source,]
route_before <- convertLineStringToDataFrame(route_before$id, route_before$id, route_before$st_astext)
route_before <- merge(route_before, ds_linhas[,c("id","source","target")], by = "id")
route_before
route_before
route
rbind(route, route_before)
route <- rbind(route, route_before)
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 20, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
route
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index])
route <- merge(route, ds_linhas[,c("id","source","target")], by = "id")
route
route_before <- ds_linhas[ds_linhas$source == route$target,]
route_before <- convertLineStringToDataFrame(route_before$id, route_before$id, route_before$st_astext)
route_before <- merge(route_before, ds_linhas[,c("id","source","target")], by = "id")
route
route_before
route <- rbind(route, route_before)
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 20, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 18, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
route_before <- ds_linhas[ds_linhas$source == route$target,]
route_before <- convertLineStringToDataFrame(route_before$id, route_before$id, route_before$st_astext)
route_before <- merge(route_before, ds_linhas[,c("id","source","target")], by = "id")
route_after <- ds_linhas[ds_linhas$target == route$source,]
route_after <- convertLineStringToDataFrame(route_after$id, route_after$id, route_after$st_astext)
route_after <- merge(route_after, ds_linhas[,c("id","source","target")], by = "id")
route <- rbind(route, route_before)
route <- rbind(route, route_after)
route
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 18, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
route$id
unique(route$id)
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgreesetwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, source, target, ST_AsText(geom) from linhas_linhas_noded")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot geom line in a route
# Plot geom in a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 15)
dim(ds_linhas)
dim(ds_linhas)[1]
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index])
route
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgreesetwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, source, target, ST_AsText(geom) from linhas_linhas_noded")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot geom line in a route
# Plot geom in a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 15)
route <- data.frame(id = numeric(), name = numeric(), seq = numeric(), lat = numeric(), lng = numeric())
for(route_index in 1:dim(ds_linhas)[1]) {
route <- rbind(route,
convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$id[route_index], ds_linhas$st_astext[route_index]))
}
dim(ds_linhas)
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgreesetwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom), highway,  osm_id, oneway, surface, target, source from osmjoinville;")
}
dbDisconnect(con)
dbUnloadDriver(drv)
names(ds_linhas)
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 15)
route_index = 1
route <- ds_linhas[route_index,]
route
route_index = 1
route <- ds_linhas[route_index,]
route <- convertMultiLineStringToDataFrame(route$id, route$name, route$st_astext)
route
route <- merge(route, ds_linhas[,c("id","source","target","highway","osm_id","oneway","surface")], by = "id")
route
dim(ds_linhas)
dim(ds_linhas)[1]
str(route)
route_ds <- data.frame(id = numeric(), name = character(), seq = numeric(), lat = numeric(), lng = numeric(), source = numeric(), target = numeric(), highway = character(), osm_id = numeric(), oneway = character(), surface = character())
route_ds
route_ds <- data.frame(id = numeric(), name = character(), seq = numeric(), lat = numeric(), lng = numeric(), source = numeric(), target = numeric(), highway = character(), osm_id = numeric(), oneway = character(), surface = character())
for(route_index in 1:dim(ds_linhas)[1]) {
route <- ds_linhas[route_index,]
route <- convertMultiLineStringToDataFrame(route$id, route$name, route$st_astext)
route <- merge(route, ds_linhas[,c("id","source","target","highway","osm_id","oneway","surface")], by = "id")
roude_ds <- rbind(route_ds, route)
}
roude_ds
map_jille = get_map(location = c(lon = mean(roude_ds$lng), lat = mean(roude_ds$lat)), zoom = 13, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = roude_ds, aes(x = lng, y = lat), size = 1)
map_jille_graph
map_jille = get_map(location = c(lon = mean(roude_ds$lng), lat = mean(roude_ds$lat)), zoom = 10, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = roude_ds, aes(x = lng, y = lat), size = 1)
map_jille_graph
dim(route_ds)
dim(roude_ds)
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgreesetwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom), highway,  osm_id, oneway, surface, target, source from osmjoinville;")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot geom line in a route
# Plot geom in a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 15)
route_ds <- data.frame(id = numeric(), name = character(), seq = numeric(), lat = numeric(), lng = numeric(), source = numeric(), target = numeric(), highway = character(), osm_id = numeric(), oneway = character(), surface = character())
for(route_index in 1:dim(ds_linhas)[1]) {
route <- ds_linhas[route_index,]
route <- convertMultiLineStringToDataFrame(route$id, route$name, route$st_astext)
route <- merge(route, ds_linhas[,c("id","source","target","highway","osm_id","oneway","surface")], by = "id")
route_ds <- rbind(route_ds, route)
}
map_jille = get_map(location = c(lon = mean(route_ds$lng), lat = mean(route_ds$lat)), zoom = 10, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route_ds, aes(x = lng, y = lat), size = 1)
map_jille_graph
route_ds
dim(route_ds)
head(route_ds)
write.csv(x = route_ds, file = "jille_osm", row.names = FALSE)
map_jille = get_map(location = c(lon = mean(route_ds$lng), lat = mean(route_ds$lat)), zoom = 15, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route_ds, aes(x = lng, y = lat), size = 1)
map_jille_graph
write.csv(x = route_ds, file = "jille_osm.csv", row.names = FALSE)
map_jille = get_map(location = c(lon = mean(route_ds$lng), lat = mean(route_ds$lat)), zoom = 9, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route_ds, aes(x = lng, y = lat), size = 1)
map_jille_graph
# Installig dependencies
#
# Postgis dependencies
#
# > install.packages("devtools")
# > devtools::install_github("RcppCore/Rcpp")
# > devtools::install_github("rstats-db/DBI")
# > sudo apt-get install libpq-dev
# > install.packages("RPostgreSQL")
#
# Google Maps dependencies
#
# > install.packages("ggmap")
# Retrieving geom lines from Postgree
setwd("/home/joao/projects/master-degree/database-gis-extractor")
require(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, user = "udesc", password = "udesc", dbname = "udesc")
if(dbExistsTable(con, "linhas")) {
ds_linhas <- dbGetQuery(con, "select id, name, ST_AsText(geom) from linhas")
}
dbDisconnect(con)
dbUnloadDriver(drv)
# Plot geom in a route
library(ggmap)
source("convert_line_string_to_data_frame.R")
options(digits = 10)
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
dim(ds_linhas)
route_index = 1
route <- convertLineStringToDataFrame(ds_linhas$id[route_index], ds_linhas$name[route_index], ds_linhas$st_astext[route_index])
map_jille = get_map(location = c(lon = mean(route$lng), lat = mean(route$lat)), zoom = 13, maptype = 'roadmap')
map_jille_graph = ggmap(map_jille)
map_jille_graph <- map_jille_graph + geom_point(data = route, aes(x = lng, y = lat), size = 1)
map_jille_graph
